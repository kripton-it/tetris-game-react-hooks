{"version":3,"sources":["img/bg.png","utils/gameHelpers.js","components/styles/styled-cell.js","utils/tetrominos.js","components/Cell.jsx","components/styles/styled-stage.js","components/Stage.jsx","components/styles/styled-display.js","components/Display.jsx","components/styles/styled-start-button.js","components/StartButton.jsx","components/styles/styled-tetris.js","hooks/usePlayer.js","hooks/useStage.js","components/Tetris.jsx","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["module","exports","createStage","Array","from","fill","hasCollision","player","stage","x","y","j","tetromino","length","i","pos","StyledCell","styled","div","props","color","type","TETROMINOS","empty","shape","I","J","L","O","S","T","Z","getRandomTetramino","randomIndex","Math","floor","random","memo","StyledStage","height","width","Stage","map","row","cell","index","key","StyledDisplay","isGameOver","Display","text","StyledStartButton","button","StartButton","handleClick","onClick","StyledTetrisWrapper","bgImage","StyledTetris","initialPosition","STAGE_WIDTH","usePlayer","useState","collided","setPlayer","resetPlayer","useCallback","direction","prev","console","log","clonedPlayer","JSON","parse","stringify","rotatedTetromino","_","column","reverse","rotateTetromino","useStage","setStage","rowsCleared","setRowsCleared","useEffect","rowsReducer","acc","every","rows","unshift","push","updateStage","prevStage","newStage","forEach","value","reduce","sweepRows","Tetris","dropTime","setDropTime","setIsGameOver","updatePlayerPosition","rotatePlayer","score","setScore","setRows","level","setLevel","calcScore","prevScore","prevRows","useGameStatus","movePlayer","movement","getDropTime","drop","prevLevel","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","keyCode","onKeyUp","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55940be0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () => {\r\n    return new Array(STAGE_WIDTH).fill([\"empty\", \"clear\"]);\r\n  });\r\n\r\nexport const hasCollision = (player, stage, { x, y }) => {\r\n  for (let j = 0; j < player.tetromino.length; j++) {\r\n    for (let i = 0; i < player.tetromino[0].length; i++) {\r\n      // проверка на ячейку фигуры\r\n      if (player.tetromino[j][i] !== 0) {\r\n        if (\r\n          // проверка на нахождение внутри области по высоте\r\n          !stage[j + player.pos.y + y] ||\r\n          // проверка по ширине\r\n          !stage[j + player.pos.y + y][i + player.pos.x + x] ||\r\n          // проверка на столкновение с существующими фигурами\r\n          stage[j + player.pos.y + y][i + player.pos.x + x][1] !== \"clear\"\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  background-color: rgba(${props => props.color}, 0.8);\r\n  border-style: solid;\r\n  border-width: ${props => (props.type === \"empty\" ? 0 : \"4px\")};\r\n  border-bottom-color: rgba(${props => props.color}, 0.1);\r\n  border-right-color: rgba(${props => props.color}, 1);\r\n  border-top-color: rgba(${props => props.color}, 1);\r\n  border-left-color: rgba(${props => props.color}, 0.3);\r\n`;\r\n","export const TETROMINOS = {\r\n  empty: {\r\n    shape: [[0]],\r\n    color: \"0, 0, 0\"\r\n  },\r\n  I: {\r\n    shape: [\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0]\r\n    ],\r\n    color: \"80, 227, 230\"\r\n  },\r\n  J: {\r\n    shape: [\r\n      [0, \"J\", 0],\r\n      [0, \"J\", 0],\r\n      [\"J\", \"J\", 0]\r\n    ],\r\n    color: \"36, 95, 223\"\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, \"L\", 0],\r\n      [0, \"L\", 0],\r\n      [0, \"L\", \"L\"]\r\n    ],\r\n    color: \"223, 153, 36\"\r\n  },\r\n  O: {\r\n    shape: [\r\n      [\"O\", \"O\"],\r\n      [\"O\", \"O\"]\r\n    ],\r\n    color: \"223, 255, 36\"\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, \"S\", \"S\"],\r\n      [\"S\", \"S\", 0],\r\n      [0, 0, 0]\r\n    ],\r\n    color: \"48, 211, 56\"\r\n  },\r\n  T: {\r\n    shape: [\r\n      [0, \"T\", 0],\r\n      [\"T\", \"T\", \"T\"],\r\n      [0, 0, 0]\r\n    ],\r\n    color: \"132, 61, 198\"\r\n  },\r\n  Z: {\r\n    shape: [\r\n      [\"Z\", \"Z\", 0],\r\n      [0, \"Z\", \"Z\"],\r\n      [0, 0, 0]\r\n    ],\r\n    color: \"227, 78, 78\"\r\n  }\r\n};\r\n\r\nexport const getRandomTetramino = () => {\r\n  const variants = \"IJLOTSZ\";\r\n  const randomIndex = Math.floor(Math.random() * variants.length);\r\n  return TETROMINOS[variants[randomIndex]];\r\n}","import React, { memo } from \"react\";\r\n\r\nimport { StyledCell } from \"./styles/styled-cell\";\r\n\r\nimport { TETROMINOS } from \"../utils/tetrominos\";\r\n\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color} />\r\n);\r\n\r\nexport default memo(Cell);\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStage = styled.div`\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${props => props.height},\r\n    calc(25vw / ${props => props.width})\r\n  );\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333333;\r\n  background-color: #111111;\r\n`;\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\n\r\nimport { STAGE_WIDTH, STAGE_HEIGHT } from \"../utils/gameHelpers\";\r\n\r\nimport { StyledStage } from \"./styles/styled-stage\";\r\n\r\nconst Stage = ({ stage }) => {\r\n  return (\r\n    <StyledStage width={STAGE_WIDTH} height={STAGE_HEIGHT}>\r\n      {stage.map(row =>\r\n        row.map((cell, index) => <Cell key={index} type={cell[0]} />)\r\n      )}\r\n    </StyledStage>\r\n  );\r\n};\r\n\r\nexport default Stage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0;\r\n  margin-bottom: 20px;\r\n  padding: 20px;\r\n  border: 4px solid #333333;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${props => (props.isGameOver ? \"red\" : \"#999999\")};\r\n  background-color: #000000;\r\n  font-size: 0.8rem;\r\n`;\r\n","import React from 'react';\r\n\r\nimport { StyledDisplay } from './styles/styled-display'\r\n\r\nconst Display = ({isGameOver, text}) => {\r\n  return (\r\n    <StyledDisplay isGameOver={isGameOver}>\r\n      {text}\r\n    </StyledDisplay>\r\n  );\r\n};\r\n\r\nexport default Display;","import styled from \"styled-components\";\r\n\r\nexport const StyledStartButton = styled.button`\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  margin-bottom: 20px;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: #ffffff;\r\n  background-color: #333333;\r\n  font: inherit;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  outline: none;\r\n  transition: background-color 0.5s;\r\n\r\n  &:hover {\r\n    background-color: #222222;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { StyledStartButton } from './styles/styled-start-button'\r\n\r\nconst StartButton = ({handleClick}) => {\r\n  return (\r\n    <StyledStartButton type=\"button\" onClick={handleClick}>\r\n      Start Game\r\n    </StyledStartButton>\r\n  );\r\n};\r\n\r\nexport default StartButton;","import styled from \"styled-components\";\r\n\r\nimport bgImage from \"../../img/bg.png\";\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-color: #000000;\r\n  background-image: url(${bgImage});\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nimport { TETROMINOS, getRandomTetramino } from \"../utils/tetrominos\";\r\n\r\nimport { STAGE_WIDTH, hasCollision } from \"../utils/gameHelpers\";\r\n\r\nconst initialPosition = {\r\n  x: STAGE_WIDTH / 2 - 1,\r\n  y: 0\r\n};\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: initialPosition,\r\n    tetromino: TETROMINOS.empty.shape,\r\n    collided: false,\r\n    // direction: Math.random() > 0.5 ? 1 : -1\r\n  });\r\n\r\n  const rotateTetromino = (tetromino, direction) => {\r\n    // строки сделать столбцами (транспонировать)\r\n    const rotatedTetromino = tetromino.map((_, index) =>\r\n      tetromino.map(column => column[index])\r\n    );\r\n    // развернуть каждую строку в обратном порядке\r\n    if (direction > 0) {\r\n      // по часовой стрелке\r\n      return rotatedTetromino.map(row => row.reverse());\r\n    }\r\n    // против часовой стрелки\r\n    return rotatedTetromino.reverse();\r\n  };\r\n\r\n  const rotatePlayer = (stage, direction) => {\r\n    console.log(direction);\r\n    // грязный хак для глубокого клонирования\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotateTetromino(clonedPlayer.tetromino, direction);\r\n\r\n    // без вращения при столкновении (без отскока)\r\n\r\n    if (hasCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.tetromino = player.tetromino;\r\n    }\r\n\r\n    // вращение при столкновении (с отскоком)\r\n    /* const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (hasCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotateTetromino(clonedPlayer.tetromino, -direction)\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    } */\r\n\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPosition = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      collided,\r\n      pos: {\r\n        x: prev.pos.x + x,\r\n        y: prev.pos.y + y\r\n      }\r\n    }));\r\n  };\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: initialPosition,\r\n      tetromino: getRandomTetramino().shape,\r\n      collided: false,\r\n      // вращение в рандомную сторону\r\n      direction: Math.random() > 0.5 ? 1 : -1\r\n    });\r\n  }, []);\r\n  return [player, updatePlayerPosition, resetPlayer, rotatePlayer];\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { createStage, STAGE_WIDTH } from \"../utils/gameHelpers\";\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const rowsReducer = (acc, row) => {\r\n      if (row.every(cell => cell[0] !== \"empty\")) {\r\n        setRowsCleared(rows => rows + 1);\r\n        acc.unshift(new Array(STAGE_WIDTH).fill([\"empty\", \"clear\"]))\r\n      } else {\r\n        acc.push(row);\r\n      }\r\n      return acc;\r\n    }\r\n\r\n    const sweepRows = (newStage) => newStage.reduce(rowsReducer, []);\r\n\r\n    const updateStage = prevStage => {\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === \"clear\" ? [\"empty\", \"clear\"] : cell))\r\n      );\r\n\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? \"merged\" : \"clear\"}`\r\n            ];\r\n          }\r\n        });\r\n      });\r\n\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n\r\n      return newStage;\r\n    };\r\n\r\n    setStage(prev => updateStage(prev));\r\n  }, [player, resetPlayer]); // ???\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { createStage, hasCollision } from \"../utils/gameHelpers\";\r\n\r\n// Components\r\nimport Stage from \"./Stage\";\r\nimport Display from \"./Display\";\r\nimport StartButton from \"./StartButton\";\r\n\r\n// Styled components\r\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/styled-tetris\";\r\n\r\n// Custom hooks\r\nimport { useInterval } from \"../hooks/useInterval\";\r\nimport { usePlayer } from \"../hooks/usePlayer\";\r\nimport { useStage } from \"../hooks/useStage\";\r\nimport { useGameStatus } from \"../hooks/useGameStatus\";\r\n\r\nconst Tetris = () => {\r\n  // console.log(\"Tetris component\");\r\n  // console.log(\"******************************\");\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [player, updatePlayerPosition, resetPlayer, rotatePlayer] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  const movePlayer = direction => {\r\n    const movement = {\r\n      x: direction,\r\n      y: 0\r\n    };\r\n\r\n    if (!hasCollision(player, stage, movement)) {\r\n      updatePlayerPosition({\r\n        ...movement,\r\n        collided: false\r\n      });\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    // reset all\r\n    setStage(createStage());\r\n    resetPlayer();\r\n    setIsGameOver(false);\r\n    setDropTime(1000);\r\n    setLevel(0);\r\n    setRows(0);\r\n    setScore(0);\r\n  };\r\n\r\n  const getDropTime = () => (level < 19 ? 1000 - 50 * level : 100);\r\n\r\n  const drop = () => {\r\n    if (rows >= (level + 1) * 10) {\r\n      setLevel(prevLevel => prevLevel + 1);\r\n      // setDropTime(1000 / (level + 1) + 200);\r\n      // setDropTime(1000 * 0.9 ** level)\r\n      setDropTime(getDropTime());\r\n    }\r\n\r\n    const movement = {\r\n      x: 0,\r\n      y: 1\r\n    };\r\n\r\n    if (!hasCollision(player, stage, movement)) {\r\n      updatePlayerPosition({\r\n        ...movement,\r\n        collided: false\r\n      });\r\n    } else if (player.pos.y < 1) {\r\n      // проверка на Game Over\r\n      setIsGameOver(true);\r\n      setDropTime(null);\r\n    } else {\r\n      // фиксируем\r\n      updatePlayerPosition({\r\n        x: 0,\r\n        y: 0,\r\n        collided: true\r\n      });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!isGameOver) {\r\n      if (keyCode === 40) {\r\n        // setDropTime(1000 * 0.9 ** level)\r\n        setDropTime(getDropTime());\r\n      }\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (isGameOver) return;\r\n    switch (keyCode) {\r\n      case 37:\r\n        movePlayer(-1);\r\n        break;\r\n      case 39:\r\n        movePlayer(1);\r\n        break;\r\n      case 40:\r\n        dropPlayer();\r\n        break;\r\n      case 38:\r\n        rotatePlayer(stage, player.direction);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  useInterval(drop, dropTime);\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={move}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {isGameOver ? (\r\n            <Display isGameOver={isGameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n\r\n          <StartButton handleClick={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\n\r\n// const POINTS = [40, 100, 300, 1200];\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const calcScore = useCallback(() => {\r\n    if (rowsCleared > 0) {\r\n      // setScore(prevScore => prevScore + POINTS[rowsCleared - 1] * (level + 1));\r\n      setScore(\r\n        prevScore => prevScore + 100 * rowsCleared * (level + 1) * 2 ** (rowsCleared - 1)\r\n      );\r\n      setRows(prevRows => prevRows + rowsCleared);\r\n    }\r\n  }, [level, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris'\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Tetris />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}